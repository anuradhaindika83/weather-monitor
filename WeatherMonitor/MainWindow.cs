
//------------------------------------------------------------------------------

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v1.1.1.0
//      You can make changes to this file and they will not be overwritten when saving.
//  </auto-generated>
// -----------------------------------------------------------------------------
namespace WeatherMonitor.GUI
{
    using Microsoft.Extensions.Configuration;
    using System.Data;
    using System.Threading.Tasks;
    using Terminal.Gui;
    using WeatherMonitor.Extensions;
    using WeatherMonitor.Models;

    public partial class MainWindow
    {
        private readonly IConfiguration _config;
        private readonly IAPIClient _api;
        private Station currentStation;
        private readonly IDataProvider _provider;
        public MainWindow(IAPIClient api, IConfiguration config, IDataProvider provider)
        {
            _config = config;
            _api = api;
            InitializeComponent();
            btnstation.Clicked += Btnstation_Clicked;
            btndp.Clicked += Btndp_Clicked;
            btnrefresh.Clicked += Btnrefresh_Clicked;
            lblStatus.Title = "Online";
            _provider = provider;
            this.tblData.KeyPress += TblData_KeyPress;
            this.KeyPress += TblData_KeyPress;
        }

        private async void Btnrefresh_Clicked()
        {
            lblStatus.Title = "Processing";
            var (table,msg,temp) = await _provider.GetDataTable(currentStation.ID);
            this.Refresh(table, currentStation,msg,temp);
            lblStatus.Title = "Online";
        }

        private void TblData_KeyPress(KeyEventEventArgs obj)
        {
            if (obj.KeyEvent.Key == Key.F4)
                this.Btnstation_Clicked();
            else if (obj.KeyEvent.Key == Key.F6)
                this.Btndp_Clicked();
            else if (obj.KeyEvent.Key == Key.F5)
                this.Btnrefresh_Clicked();
        }

        private async void Btndp_Clicked()
        {
            lblStatus.Title = "Processing";
            DataPointsWindow window = new DataPointsWindow(_api, _config, currentStation, _provider);
            var points = await _api.GetAllDataPoints();
            this.LoadWindow(window, () =>
            {
                window.RefreshList(points);
            });
        }

        private async void Btnstation_Clicked()
        {
            lblStatus.Title = "Processing";
            StationsWindow stationsWindow = new StationsWindow(_api, _config, _provider);
            var stations = await _api.GetStations();

            this.LoadWindow(stationsWindow, () => stationsWindow.RefreshList(stations));
        }

        public void Refresh(DataTable table, Station station, string msg, string temp)
        {

            var dtable = this.tblData.Table;

            dtable.Columns.Clear();
            dtable.Rows.Clear();

            foreach (DataColumn c in table.Columns)
                dtable.Columns.Add(c.ColumnName);

            foreach (DataRow r in table.Rows)
                dtable.Rows.Add(r.ItemArray);

            string t = string.IsNullOrEmpty(temp) ? "N/A" : $"{temp}c";
            lblStation.Title = station.Name;
            lblWmo.Title = station.ID;
            this.avgTemp.Title = $"Avg Temp :{t}" ;
            statmsg.Title = msg;
            currentStation = station;
            this.tblData.Update();
        }





    }
}
